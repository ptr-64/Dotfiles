global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'
def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'
endglobal

snippet yml "YAML header" bA
---
title: $1
author: $2
date: $3
output:
    ${4:html/pdf/word/md/beamer/..._document:}
        ${5:toc: true/false}
---
$0
endsnippet

snippet ggplt "ggplot" bA
ggplot(${{1:data = }}) +
    geom_${2:geom object}(mapping = aes(x = ${3:x_variable,}
                                        y = ${4:y_variable,}
                                        ${5:color(var/string), shape(var), alpha(val)}
                                    ),
                                    ${6:stat = , position = }
    
                        ) +
    labs(${7:x, y, title, subtitle, etc})
endsnippet

snippet chnk "code chunk" bA
<!--
# include = Show code and output
# echo = Show output only
# message = Show messages generated by code execution
# warning = Show warnings
# fig.cap = string input; add caption for a figure generating code chunk
-->
\`\`\`{${1: r, python}, ${2:include, echo, etc}}
${VISUAL}
$0
\`\`\`

endsnippet

snippet fn "define a function" b
${1:fn_name} <- function(${2:args}){
    ${3:VISUAL}
}
endsnippet

snippet frlp "for loop" w
for (${1:iter} in ${seq_along()/list/vector/etc}){
    ${3:VISUAL}
}
endsnippet

snippet mk "math" wA
$${1}$$0
endsnippet

snippet dm "Math" wA
\[${1:${VISUAL}}\] $0
endsnippet

snippet tdykbl "tidy kable" wA
    tidy() %>%
    mutate(term = c("Intercept", ${1:"VarName"})) %>%
    kable(
        caption = ${2:"caption"},
        col.name = c("Variables", ${3:"estimator"}, "SE", "T-Statistic", "P-Value"),
        digits = c(0,3,4,3,4)
    ) %>%
    kable_styling()
endsnippet

snippet lbrry "libraries" bA
library(tidyverse)
library(broom)
library(knitr)
library(kableExtra)
library(xtable)
endsnippet

context math()
snippet AA "for all" wA
\forall
endsnippet

context math()
snippet EE "exists" wA
\exists
endsnippet

context math()
snippet __ "subscript" iA
_{$1}$0 
endsnippet

context math()
snippet ** "superscript" iA
^{$1}$0
endsnippet

context math()
snippet @>> "Rightarrow" wA
\Rightarrow
endsnippet

context math()
snippet // "fraction" wA
\frac{$1}{$2}$0
endsnippet

context math()
snippet prtl "partial" wA
\frac{ \partial $1}{\partial $2}$0
endsnippet

context math()
snippet mbb "mathbb" 
\mathbb{$1}$0
endsnippet

context math()
priority 100
snippet "((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*|\ )(bar)" "bar, or overline" riA
\overline{`!p snip.rv=match.group(1)`$1 ${VISUAL}} $0
endsnippet

snippet bgn "begin" b
\begin{${1:env}}
${0:${VISUAL}}
\end{$1}
endsnippet

context "math()"
snippet '([A-Za-z])(II|JJ|KK|NN|TT)' "xn" rwA
`!p snip.rv = match.group(1)`_{`!p snip.rv=match.group(2)[0].lower()`}
endsnippet

context "math()"
snippet '([A-Za-z])(IPP|JPP|KPP|NPP|TPP)' "xn+1" rwA
`!p snip.rv = match.group(1)`_{`!p snip.rv=match.group(2)[0].lower()`+$1}
endsnippet

context "math()"
snippet '(?<!\\)(alpha|beta|gamma|theta|nu|mu|epsilon|delta|rho|phi|zeta|iota|kappa|lambda)' "greek" rw
\\`!p snip.rv = match.group(1)`
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|arcsin|arccos|arctan|arccot|arcsc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 300
context "math()"
snippet ntgrl "integral" wA
\int\limits_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

context "math()"
snippet "((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*|\ )(tlde)" "tilde" riA
\widetilde{`!p snip.rv=match.group(1)`$1 ${VISUAL}} $0
endsnippet

context "math()"
snippet "((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*|\ )(u,.)" "underline" iA
\underline{`!p snip.rv = match.group(1)`$1 ${VISUAL}} $0
endsnippet

context "math()"
snippet "((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*|\ )(vctr)" "vector" riA
\vec{`!p snip.rv=match.group(1)`$1 ${VISUAL}}
endsnippet

context "math()"
priority 100
snippet "((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*|\ )(hat)" "hat" riA
\hat{`!p snip.rv=match.group(1)`$1 ${VISUAL}}
endsnippet
